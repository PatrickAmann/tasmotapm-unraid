Menu="Dashboard:0"
Cond="version_compare(parse_ini_file('/etc/unraid-version')['version'],'6.11.9','>')"
---
<?PHP
$pluginname = "tasmotapm-ng"; // substitute this entry with the name of your plugin
$tasmotapm_cfg = parse_plugin_cfg("tasmotapm-ng",true);
$dynamix = parse_plugin_cfg("dynamix",true);
switch ($dynamix['display']['theme']) {
  case 'white': $color = '#1c1b1b'; $grid = '#e3e3e3'; break;
  case 'black': $color = '#f2f2f2'; $grid = '#2b2b2b'; break;
  case 'azure': $color = '#606e7f'; $grid = '#f3f0f4'; break;
  case 'gray' : $color = '#606e7f'; $grid = '#0c0f0b'; break;
  default     : $color = '#1c1b1b'; $grid = '#e3e3e3'; break;
}

$costsToday = $tasmotapm_cfg['COSTS_DISPLAY'] ? '<span class="w26 tasmotapm-costs-today"></span>' : "";
$costsYesterday = $tasmotapm_cfg['COSTS_DISPLAY'] ? '<span class="w26 tasmotapm-costs-yesterday"></span>' : "";
$costsTotal = $tasmotapm_cfg['COSTS_DISPLAY'] ? '<span class="w26 tasmotapm-costs-total"></span>' : "";

$mytiles[$pluginname]['column1'] =
<<<EOT
<tbody title="_(Tasmota)_">
<tr>
  <td>
    <i class="icon-ups f32"></i>
    <div class="section">
      Tasmota Power Monitor<br />
      <span>
          <span class="dense">
            <i class="ups fa fa-bolt"></i>_(Usage)_: <span class="tasmotapm-energy-power">0</span>
          </span>
      </span>
    </div>
    <a href="/Dashboard/Settings/TasmotaPMNGSettings" title="_(Go to Tasmota settings)_">
      <i class="fa fa-fw fa-cog control"></i>
    </a>
  </td>
</tr>
<tr>
  <td>
    <div style="float: right;">
      <span>
        <select id='powerline' class='auto' title="_(Select time frame)_" onchange='changePowerline(this.value)'>
          <option value="10">10 s</option>
          <option value="30">30 s</option>
          <option value="60">1 m</option>
          <option value="120">2 m</option>
          <option value="300">5 m</option>
        </select>
      </span>
    </div>
  </td>
</tr>
<tr>
  <td>
    <div id="powerusagechart" style="min-height: 135px;"></div>
  </td>
</tr>

  <tr class="tasmotapm_view">
    <td>
      <span class="w26">Today:</span>
      <span class="w26 tasmotapm-energy-today"></span>
      $costsToday
    </td>
  </tr>

  <tr class="tasmotapm_view">
    <td>
      <span class="w26">Yesterday:</span>
      <span class="w26 tasmotapm-energy-yesterday"></span>
      $costsYesterday
    </td>
  </tr>

  <tr class="tasmotapm_view">
    <td>
      <span class="w26">Total:</span>
      <span class="w26 tasmotapm-energy-total"></span>
      $costsTotal
    </td>
  </tr>

  <tr class="tasmotapm_view">
    <td>
      <span class="w26">Power</span>
      <span class="w26 tasmotapm-energy-power"></span>
    </td>
  </tr>
  <tr class="tasmotapm_view">
    <td>
      <span class="w26">Voltage</span>
      <span class="w26 tasmotapm-energy-voltage"></span>
    </td>
  </tr>
  <tr class="tasmotapm_view">
    <td>
      <span class="w26">Current</span>
      <span class="w26 tasmotapm-energy-current"></span>
    </td>
  </tr>
  <tr class="tasmotapm_view">
    <td>
      <span class="w26">Apparent power</span>
      <span class="w26 tasmotapm-energy-apparentpower"></span>
    </td>
  </tr>
  <tr class="tasmotapm_view">
    <td>
      <span class="w26">Reactive power</span>
      <span class="w26 tasmotapm-energy-reactivepower"></span>
    </td>
  </tr>
  <tr class="tasmotapm_view">
    <td>
      <span class="w26">Efficiency</span>
      <span class="w26 tasmotapm-energy-efficiency"></span>
    </td>
  </tr>
</tbody>
EOT;

?>
<style>
select#powerline {
  border: none;
  padding: 0 12px 0 0;
}
</style>
<script src="<?autov('/webGui/javascript/jquery.apexcharts.js')?>"></script>
<script>

var powerusagechart;
var powertime = 0;
var powerline = $.cookie('powerline')||30;
var power = [];

var options_powerusage = {
   series:[
      {
         name:'powerConsumption',
         data:power.slice()
      }
   ],
   chart:{
      height:120,
      type:'line',
      fontFamily:'clear-sans',
      animations:{
         enabled:true,
         easing:'linear',
         dynamicAnimation:{
            speed:1000
         }
      },
      toolbar:{
         show:false
      },
      zoom:{
         enabled:false
      }
   },
   dataLabels:{
      enabled:false
   },
   tooltip:{
      enabled:false
   },
   stroke:{
      curve:'smooth',
      width:1
   },
   colors:[
      '#ff8c2f'
   ],
   markers:{
      size:0
   },
   xaxis:{
      type:'datetime',
      range:powerline-1,
      labels:{
         show:false
      },
      axisTicks:{
         show:false
      },
      axisBorder:{
         show:false
      }
   },
   yaxis:{
      tickAmount:4,
      labels:{
         formatter:function(v,
         i){
            return v.toFixed(0)+' W';
         },
         style:{
            colors:'<?=$color?>'
         }
      },
      axisBorder:{
         show:false
      },
      axisTicks:{
         show:false
      }
   },
   grid:{
      show:true,
      borderColor:'<?=$grid?>'
   },
   legend:{
      show:false
   }
};

function tasmotapm_status() {
    $.getJSON("/plugins/tasmotapm/status.php", (data) => {
        if (data) {
            addChartPowerConsumption(data.Power);
            powerusagechart.updateSeries([{data:power}]);
			      $(".tasmotapm-energy-power").html(data.Power+" W");
            $(".tasmotapm-energy-today").html(data.Today+" kWh");
            $(".tasmotapm-energy-yesterday").html(data.Yesterday+" kWh");
            $(".tasmotapm-energy-total").html(data.Total+" kWh");
            $(".tasmotapm-energy-voltage").html(data.Voltage+" V");
            $(".tasmotapm-energy-current").html(data.Current+" A");
            $(".tasmotapm-energy-apparentpower").html(data.ApparentPower+" VA");
            $(".tasmotapm-energy-reactivepower").html(data.ReactivePower+" VAr");
            $(".tasmotapm-energy-efficiency").html((Number.parseFloat(data.Factor) * 100).toFixed()+" %");

            if (<?=$tasmotapm_cfg['COSTS_DISPLAY'];?>) {
              $(".tasmotapm-costs-today").html((Number.parseFloat(data.Costs_Price) * Number.parseFloat(data.Today)).toFixed(2)+" "+data.Costs_Unit);
              $(".tasmotapm-costs-yesterday").html((Number.parseFloat(data.Costs_Price) * Number.parseFloat(data.Yesterday)).toFixed(2)+" "+data.Costs_Unit);
              $(".tasmotapm-costs-total").html((Number.parseFloat(data.Costs_Price) * Number.parseFloat(data.Total)).toFixed(2)+" "+data.Costs_Unit);
            }

        }
    });
}

function addChartPowerConsumption(powerConsumption) {
  powertime++;
  var i = power.length - powerline;
  if (i > 0) { // clear value outside graph
    i = i - 1;
    power[i].x = powertime - powerline;
    power[i].y = 0;
  }
  power.push({x:powertime, y:powerConsumption});
}

function changePowerline(val) {
  powerline = val;
  if (val==30) $.removeCookie('powerline'); else $.cookie('powerline',val,{expires:3650});
  powerusagechart.updateOptions({xaxis:{range:powerline-1}});
}

function initPowerChart() {
  var now = new Date().getTime();
  for (var i=0; i < powerline; i++) {
    var x = now + i;
    var y = power[i]||0;
    power.push({x,y});
  }
  powertime = x + 1;
}

$(function(){
  $('#powerline').val(powerline);

  initPowerChart();
  powerusagechart = new ApexCharts(document.querySelector('#powerusagechart'), options_powerusage);
  powerusagechart.render();
  tasmotapm_status();

  if (<?=$tasmotapm_cfg['UIREFRESH'];?>) {
    setInterval(tasmotapm_status, <?=$tasmotapm_cfg['UIREFRESH'];?>);
  }
});

function resetPowerChart() {
  // prevent unlimited graph growing
  power = power.slice(-powerline);
}

function update900() {
  // prevent chart overflowing, reset every 15 minutes
  resetPowerChart();
  setTimeout(update900,900000);
}

update900();
</script>